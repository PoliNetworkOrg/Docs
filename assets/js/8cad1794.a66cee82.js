"use strict";(self.webpackChunkpolinetworkdocs=self.webpackChunkpolinetworkdocs||[]).push([[946],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(n),f=o,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||i;return n?r.createElement(m,a(a({ref:t},s),{},{components:n})):r.createElement(m,a({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:o,a[1]=p;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8715:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:2},a=void 0,p={unversionedId:"Infra/pipelines/cd",id:"Infra/pipelines/cd",title:"cd",description:"Continuous Delivery",source:"@site/docs/Infra/pipelines/cd.md",sourceDirName:"Infra/pipelines",slug:"/Infra/pipelines/cd",permalink:"/docs/Infra/pipelines/cd",draft:!1,editUrl:"https://github.com/polinetworkorg/polinetworkdocs/docs/Infra/pipelines/cd.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"ci",permalink:"/docs/Infra/pipelines/ci"},next:{title:"K8s Basics",permalink:"/docs/category/k8s-basics"}},l={},c=[{value:"Continuous Delivery",id:"continuous-delivery",level:2},{value:"Continuous Deployment",id:"continuous-deployment",level:2}],s={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"continuous-delivery"},"Continuous Delivery"),(0,o.kt)("p",null,"Following the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/PoliNetworkOrg/PoliNetworkBot_CSharp/blob/master/.github/workflows/ci-cd.yaml"},"Bot Pipeline")," we deploy the built Docker Image in our ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/u/polinetwork"},"Docker Hub registry"),".\nWe currently have 2 environments, dev and prod on the dev and main branch respectively.\nFinally we update ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/polinetworkorg/polinetwork-cd"},"these")," k8s (Kubernetes) deployment files. "),(0,o.kt)("h2",{id:"continuous-deployment"},"Continuous Deployment"),(0,o.kt)("p",null,"We rely on ArgoCD to deploy our pods following the manifest present in the polinetwork-cd repository, as specified ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/PoliNetworkOrg/terraform/blob/main/argocd-applications.yaml"},"here in the terraform deployment code"),".\nArgoCD works by ensuring 0 downtime (by monitoring continuously all the deployed pods) and checking for changes on the polinetwork-cd repository (which is updated by the various pipeline whenever a change is pushed to the registry) ensuring fast deployment of fixes and changes in dev and prod environments."))}u.isMDXComponent=!0}}]);